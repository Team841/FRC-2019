// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Odyssey;

import org.usfirst.frc841.Odyssey.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc841.Odyssey.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton quickTurn;
    public JoystickButton stopQuickTurn;
    public Joystick driver;
    public JoystickButton openGrabber6;
    public JoystickButton closeGrabber5;
    public JoystickButton outArmBrace8;
    public JoystickButton inArmBrace7;
    public JoystickButton front4;
    public JoystickButton back1;
    public JoystickButton centerArmBrace2;
    public Joystick coDriver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        coDriver = new Joystick(1);
        
        centerArmBrace2 = new JoystickButton(coDriver, 2);
        centerArmBrace2.whenPressed(new SetHatchElbow(3000));
        back1 = new JoystickButton(coDriver, 1);
        back1.whileHeld(new SetHatchElbow(3800));
        front4 = new JoystickButton(coDriver, 4);
        front4.whileHeld(new SetHatchElbow(1950));
        inArmBrace7 = new JoystickButton(coDriver, 7);
        inArmBrace7.whenPressed(new SetArmBrace(false));
        outArmBrace8 = new JoystickButton(coDriver, 8);
        outArmBrace8.whenPressed(new SetArmBrace(true));
        closeGrabber5 = new JoystickButton(coDriver, 5);
        closeGrabber5.whenPressed(new SetGrabber(true));
        openGrabber6 = new JoystickButton(coDriver, 6);
        openGrabber6.whenPressed(new SetGrabber(false));
        driver = new Joystick(0);
        
        stopQuickTurn = new JoystickButton(driver, 6);
        stopQuickTurn.whenReleased(new StopQuickTurn());
        quickTurn = new JoystickButton(driver, 6);
        quickTurn.whenPressed(new QuickTurn());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("QuickTurn", new QuickTurn());
        SmartDashboard.putData("StopQuickTurn", new StopQuickTurn());
        SmartDashboard.putData("SetHatchElbow: Back", new SetHatchElbow(5813));
        SmartDashboard.putData("SetHatchElbow: Front", new SetHatchElbow(3800));
        SmartDashboard.putData("SetHatchElbow: Middle", new SetHatchElbow(4807));
        SmartDashboard.putData("SetGrabber: open", new SetGrabber(false));
        SmartDashboard.putData("SetGrabber: close", new SetGrabber(true));
        SmartDashboard.putData("SetArmBrace: out", new SetArmBrace(true));
        SmartDashboard.putData("SetArmBrace: in", new SetArmBrace(false));
        SmartDashboard.putData("Release", new Release());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriver() {
        return driver;
    }

    public Joystick getcoDriver() {
        return coDriver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    public Joystick getDriver() {
        return driver;
    }

    public Joystick getCoDriver() {
        return coDriver;
    }
}

