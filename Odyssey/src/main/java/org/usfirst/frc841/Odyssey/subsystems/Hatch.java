// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Odyssey.subsystems;


import org.usfirst.frc841.Odyssey.C;
import org.usfirst.frc841.Odyssey.commands.*;
import org.usfirst.frc841.lib.PID.PIDControlLoop;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Hatch extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX elbow;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    public Hatch.CLoop ploop;
    
    double x[] = {1,2,3};
    double y[] = {0,0,0};
    private double period = 0.1;
    private double zero;
    //constructor

    public Hatch() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elbow = new WPI_TalonSRX(7);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    ploop = new Hatch.CLoop(this, this.x,this.y, (long) Math.abs(this.period*100));
    ploop.SetOutputLimits(-1, 1);
    ploop.setTunings(C.h_p, C.h_i, C.h_d);
    this.zero = elbow.getSensorCollection().getPulseWidthPosition();
    this.zero = 2850- this.zero;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
       // SmartDashboard.putNumber("Abs Angle", this.getAngle());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands./**
     
    public double getAngle(){
        return elbow.getSensorCollection().getPulseWidthPosition();
    }
    /* This Class links the Intakes Control loop to the subsystem
	 *
	 */
	public class CLoop extends PIDControlLoop {
		Hatch subsystem;

		public CLoop(Hatch subsystem, double[] X, double[] Y, long SampleTime) {
			super(X, Y, SampleTime);
			this.subsystem = subsystem;
			// TODO Auto-generated constructor stub
		}

		@Override
		public void setOutput(double value) {

			subsystem.elbow.set(value);
			
			// System.out.println("Output: " + value);
		}

		@Override
		public double getSensorReading() {
			// System.out.println("in: " + subsystem.getUpperWheelSpeed());
			return 0;//subsystem.getAngle();
		}
		@Override
		public void update() {
		//	SmartDashboard.putString("DB/String 2",
		//			"Angle: " + Math.floor(this.subsystem.getAngle() * 100 / 100.0));
			SmartDashboard.putNumber ("Angle",this.subsystem.getAngle ());
		}
	}



}

